knit("nc_r.Rmd", output = "nc_r.md")
library(knitr)
knit("nc_r.Rmd", output = "nc_r.md")
# Store path to folder with Network Canvas data
### Note that this path will almost certainly be different on your own computer
path_to_data <- paste0(getwd(),'/networkCanvasExport/')
# Store path to Network Canvas protocol file
### Note that this path will almost certainly be different on your own computer
path_to_protocol <- paste0(getwd(),'/IJE_RADAR_Protocol.netcanvas')
# Load `ideanet`
library(ideanet)
# Set up `nc_read`
nc_data <- nc_read(path = path_to_data,
protocol = path_to_protocol)
head(nc_data$egos)
head(nc_data$alters)
# Observe names of data frames stored in `alter_edgelists`
names(nc_data$alter_edgelists)
# Alter edgelist for "Close" ties
head(nc_data$alter_edgelists$Close)
# Alter edgelist for "Drug" ties
head(nc_data$alter_edgelists$DrugTie)
# Alter edgelist for "Sex" ties
head(nc_data$alter_edgelists$Sex)
# Load required packages
library(egor)
library(sna)
library(ggplot2)
# Create alter list for only "Close" ties
close_alters <- nc_data$alters %>% filter(Close == TRUE)
# Create alter list for only "Drugs" ties
drug_alters <- nc_data$alters %>% filter(Drugs == TRUE)
# Create alter list for only "Sex" ties
sex_alters <- nc_data$alters %>% filter(Sex == TRUE)
# Create alter-alter edgelist for "Close" ties
close_aa <- nc_data$alter_edgelists$Close
# Create alter-alter edgelist for "Drugs" ties
drug_aa <- nc_data$alter_edgelists$DrugTie
# Create alter-alter edgelist for "Sex" ties
sex_aa <- nc_data$alter_edgelists$SexTie
# Note that the `egor` function will also work if we specify the ID values
# in our data generated by Network Canvas
egorNetworkCanvas <- egor(
# Note we are using the alter list specifically for "Close" ties
alters = nc_data$alters,
# Our ego list is unchanged, so we draw on it as it is stored in
# `nc_data`
egos = nc_data$egos,
# We use `close_aa` as our alter-alter edgelist, which is the same
# as `nc_data$alter_edgelists`
aaties = close_aa,
#
ID.vars = list(
ego = "networkCanvasEgoUUID",
alter = "networkCanvasUUID",
source = "networkCanvasSourceUUID",
target = "networkCanvasTargetUUID"))
oneEgoNet <- as_network(egorNetworkCanvas)[[1]]
oneEgoNet%v%"vertex.names" <- oneEgoNet%v%"name"
colorScheme <- c( "#CC6677", "#117733", "#AA4499",
"#6699CC")
# A little recoding to get a color for each frequency
nodeColors <- ifelse(oneEgoNet%v%"ContactFreq"=="Daily",colorScheme[1],
ifelse(oneEgoNet%v%"ContactFreq"=="Weekly",colorScheme[2],
ifelse(oneEgoNet%v%"ContactFreq"=="Less than \n weekly",colorScheme[3],
colorScheme[4])))
gplot(oneEgoNet,
usearrows = FALSE,
label = oneEgoNet%v%"name",
displaylabels = TRUE,
vertex.col=nodeColors,
edge.col="gray",
coord = matrix(c(as.numeric(oneEgoNet%v%"Cords_x"),
-as.numeric(oneEgoNet%v%"Cords_y")),
nrow=length(unique(oneEgoNet%v%"name")),
ncol=2))
# Make a visualization displaying both frequency of communication and drug use status
# A quick note: `egor`'s visualization tools don't appear to like working with `logical`-class
# vectors such as the `Drugs` variable in our alter list. To allow for smooth visualization,
# we recode `Drugs` as a new character variable with the labels we want to use in our visualization:
egorNetworkCanvas$alter$Drugs_label <- ifelse(is.na(egorNetworkCanvas$alter$Drugs), "Not Drug Partner", "Drug Partner")
# We'll also recode our `ContactFreq` variable to show better labels
egorNetworkCanvas$alter$ContactFreq_label <- ifelse(egorNetworkCanvas$alter$ContactFreq == "Less_than_weekly",
"Less than\nweekly",
egorNetworkCanvas$alter$ContactFreq)
# And we'll want to create a label column for node IDs as well
egorNetworkCanvas$alter$alter_label <- as.character(egorNetworkCanvas$alter$.altID)
plot(egorNetworkCanvas,
venn_var = "Drugs_label",
pie_var = "ContactFreq_label",
vertex_label_var = "name",
type = "egogram")
summary(egorNetworkCanvas)
ego_density(egorNetworkCanvas)
networkNetworkCanvas <- as_network(egorNetworkCanvas)
histData <- networkNetworkCanvas %>%
lapply(degree,cmode="indegree") %>%
unlist(recursive = FALSE) %>%
as.data.frame()
histData$degree <- as.numeric(histData$".")
ggplot(histData, aes(x=degree)) +
geom_histogram(color="black", fill="white",bins=5) +
theme_classic()
ego_density(egorNetworkCanvas) %>%
full_join(egorNetworkCanvas$ego,by=".egoID") %>%
ggplot(aes(x = MarijuanaUsed, y = density)) +
geom_point(size=5) +
geom_text(label=egorNetworkCanvas$ego$networkCanvasCaseID, aes(vjust=c(-1.5),
hjust=c(-.5))) +
ylim(0,1.05) + theme_classic()
knit("nc_r.Rmd", output = "nc_r.md")
knit("nc_r.Rmd", output = "nc_r.md")
knit("nc_r.Rmd", output = "nc_r.md")
knitr::opts_chunk$set(dpi=300,fig.width=7)
# Store path to folder with Network Canvas data
### Note that this path will almost certainly be different on your own computer
path_to_data <- paste0(getwd(),'/networkCanvasExport/')
# Store path to Network Canvas protocol file
### Note that this path will almost certainly be different on your own computer
path_to_protocol <- paste0(getwd(),'/IJE_RADAR_Protocol.netcanvas')
# Load `ideanet`
library(ideanet)
# Set up `nc_read`
nc_data <- nc_read(path = path_to_data,
protocol = path_to_protocol)
head(nc_data$egos)
head(nc_data$alters)
# Observe names of data frames stored in `alter_edgelists`
names(nc_data$alter_edgelists)
# Alter edgelist for "Close" ties
head(nc_data$alter_edgelists$Close)
# Alter edgelist for "Drug" ties
head(nc_data$alter_edgelists$DrugTie)
# Alter edgelist for "Sex" ties
head(nc_data$alter_edgelists$Sex)
# Load required packages
library(egor)
library(sna)
library(ggplot2)
# Create alter list for only "Close" ties
close_alters <- nc_data$alters %>% filter(Close == TRUE)
# Create alter list for only "Drugs" ties
drug_alters <- nc_data$alters %>% filter(Drugs == TRUE)
# Create alter list for only "Sex" ties
sex_alters <- nc_data$alters %>% filter(Sex == TRUE)
# Create alter-alter edgelist for "Close" ties
close_aa <- nc_data$alter_edgelists$Close
# Create alter-alter edgelist for "Drugs" ties
drug_aa <- nc_data$alter_edgelists$DrugTie
# Create alter-alter edgelist for "Sex" ties
sex_aa <- nc_data$alter_edgelists$SexTie
# Note that the `egor` function will also work if we specify the ID values
# in our data generated by Network Canvas
egorNetworkCanvas <- egor(
# Note we are using the alter list specifically for "Close" ties
alters = nc_data$alters,
# Our ego list is unchanged, so we draw on it as it is stored in
# `nc_data`
egos = nc_data$egos,
# We use `close_aa` as our alter-alter edgelist, which is the same
# as `nc_data$alter_edgelists`
aaties = close_aa,
#
ID.vars = list(
ego = "networkCanvasEgoUUID",
alter = "networkCanvasUUID",
source = "networkCanvasSourceUUID",
target = "networkCanvasTargetUUID"))
oneEgoNet <- as_network(egorNetworkCanvas)[[1]]
oneEgoNet%v%"vertex.names" <- oneEgoNet%v%"name"
colorScheme <- c( "#CC6677", "#117733", "#AA4499",
"#6699CC")
# A little recoding to get a color for each frequency
nodeColors <- ifelse(oneEgoNet%v%"ContactFreq"=="Daily",colorScheme[1],
ifelse(oneEgoNet%v%"ContactFreq"=="Weekly",colorScheme[2],
ifelse(oneEgoNet%v%"ContactFreq"=="Less than \n weekly",colorScheme[3],
colorScheme[4])))
gplot(oneEgoNet,
usearrows = FALSE,
label = oneEgoNet%v%"name",
displaylabels = TRUE,
vertex.col=nodeColors,
edge.col="gray",
coord = matrix(c(as.numeric(oneEgoNet%v%"Cords_x"),
-as.numeric(oneEgoNet%v%"Cords_y")),
nrow=length(unique(oneEgoNet%v%"name")),
ncol=2))
# Make a visualization displaying both frequency of communication and drug use status
# A quick note: `egor`'s visualization tools don't appear to like working with `logical`-class
# vectors such as the `Drugs` variable in our alter list. To allow for smooth visualization,
# we recode `Drugs` as a new character variable with the labels we want to use in our visualization:
egorNetworkCanvas$alter$Drugs_label <- ifelse(is.na(egorNetworkCanvas$alter$Drugs), "Not Drug Partner", "Drug Partner")
# We'll also recode our `ContactFreq` variable to show better labels
egorNetworkCanvas$alter$ContactFreq_label <- ifelse(egorNetworkCanvas$alter$ContactFreq == "Less_than_weekly",
"Less than\nweekly",
egorNetworkCanvas$alter$ContactFreq)
# And we'll want to create a label column for node IDs as well
egorNetworkCanvas$alter$alter_label <- as.character(egorNetworkCanvas$alter$.altID)
plot(egorNetworkCanvas,
venn_var = "Drugs_label",
pie_var = "ContactFreq_label",
vertex_label_var = "name",
type = "egogram")
summary(egorNetworkCanvas)
ego_density(egorNetworkCanvas)
networkNetworkCanvas <- as_network(egorNetworkCanvas)
histData <- networkNetworkCanvas %>%
lapply(degree,cmode="indegree") %>%
unlist(recursive = FALSE) %>%
as.data.frame()
histData$degree <- as.numeric(histData$".")
ggplot(histData, aes(x=degree)) +
geom_histogram(color="black", fill="white",bins=5) +
theme_classic()
ego_density(egorNetworkCanvas) %>%
full_join(egorNetworkCanvas$ego,by=".egoID") %>%
ggplot(aes(x = MarijuanaUsed, y = density)) +
geom_point(size=5) +
geom_text(label=egorNetworkCanvas$ego$networkCanvasCaseID, aes(vjust=c(-1.5),
hjust=c(-.5))) +
ylim(0,1.05) + theme_classic()
knit("nc_r.Rmd", output = "nc_r.md")
knit("nc_r.Rmd", output = "nc_r.md")
knitr::opts_chunk$set(dpi=300,fig.width=10)
# Store path to folder with Network Canvas data
### Note that this path will almost certainly be different on your own computer
path_to_data <- paste0(getwd(),'/networkCanvasExport/')
# Store path to Network Canvas protocol file
### Note that this path will almost certainly be different on your own computer
path_to_protocol <- paste0(getwd(),'/IJE_RADAR_Protocol.netcanvas')
# Load `ideanet`
library(ideanet)
# Set up `nc_read`
nc_data <- nc_read(path = path_to_data,
protocol = path_to_protocol)
head(nc_data$egos)
head(nc_data$alters)
# Observe names of data frames stored in `alter_edgelists`
names(nc_data$alter_edgelists)
# Alter edgelist for "Close" ties
head(nc_data$alter_edgelists$Close)
# Alter edgelist for "Drug" ties
head(nc_data$alter_edgelists$DrugTie)
# Alter edgelist for "Sex" ties
head(nc_data$alter_edgelists$Sex)
# Load required packages
library(egor)
library(sna)
library(ggplot2)
# Create alter list for only "Close" ties
close_alters <- nc_data$alters %>% filter(Close == TRUE)
# Create alter list for only "Drugs" ties
drug_alters <- nc_data$alters %>% filter(Drugs == TRUE)
# Create alter list for only "Sex" ties
sex_alters <- nc_data$alters %>% filter(Sex == TRUE)
# Create alter-alter edgelist for "Close" ties
close_aa <- nc_data$alter_edgelists$Close
# Create alter-alter edgelist for "Drugs" ties
drug_aa <- nc_data$alter_edgelists$DrugTie
# Create alter-alter edgelist for "Sex" ties
sex_aa <- nc_data$alter_edgelists$SexTie
# Note that the `egor` function will also work if we specify the ID values
# in our data generated by Network Canvas
egorNetworkCanvas <- egor(
# Note we are using the alter list specifically for "Close" ties
alters = nc_data$alters,
# Our ego list is unchanged, so we draw on it as it is stored in
# `nc_data`
egos = nc_data$egos,
# We use `close_aa` as our alter-alter edgelist, which is the same
# as `nc_data$alter_edgelists`
aaties = close_aa,
#
ID.vars = list(
ego = "networkCanvasEgoUUID",
alter = "networkCanvasUUID",
source = "networkCanvasSourceUUID",
target = "networkCanvasTargetUUID"))
oneEgoNet <- as_network(egorNetworkCanvas)[[1]]
oneEgoNet%v%"vertex.names" <- oneEgoNet%v%"name"
colorScheme <- c( "#CC6677", "#117733", "#AA4499",
"#6699CC")
# A little recoding to get a color for each frequency
nodeColors <- ifelse(oneEgoNet%v%"ContactFreq"=="Daily",colorScheme[1],
ifelse(oneEgoNet%v%"ContactFreq"=="Weekly",colorScheme[2],
ifelse(oneEgoNet%v%"ContactFreq"=="Less than \n weekly",colorScheme[3],
colorScheme[4])))
gplot(oneEgoNet,
usearrows = FALSE,
label = oneEgoNet%v%"name",
displaylabels = TRUE,
vertex.col=nodeColors,
edge.col="gray",
coord = matrix(c(as.numeric(oneEgoNet%v%"Cords_x"),
-as.numeric(oneEgoNet%v%"Cords_y")),
nrow=length(unique(oneEgoNet%v%"name")),
ncol=2))
# Make a visualization displaying both frequency of communication and drug use status
# A quick note: `egor`'s visualization tools don't appear to like working with `logical`-class
# vectors such as the `Drugs` variable in our alter list. To allow for smooth visualization,
# we recode `Drugs` as a new character variable with the labels we want to use in our visualization:
egorNetworkCanvas$alter$Drugs_label <- ifelse(is.na(egorNetworkCanvas$alter$Drugs), "Not Drug Partner", "Drug Partner")
# We'll also recode our `ContactFreq` variable to show better labels
egorNetworkCanvas$alter$ContactFreq_label <- ifelse(egorNetworkCanvas$alter$ContactFreq == "Less_than_weekly",
"Less than\nweekly",
egorNetworkCanvas$alter$ContactFreq)
# And we'll want to create a label column for node IDs as well
egorNetworkCanvas$alter$alter_label <- as.character(egorNetworkCanvas$alter$.altID)
plot(egorNetworkCanvas,
venn_var = "Drugs_label",
pie_var = "ContactFreq_label",
vertex_label_var = "name",
type = "egogram")
summary(egorNetworkCanvas)
ego_density(egorNetworkCanvas)
networkNetworkCanvas <- as_network(egorNetworkCanvas)
histData <- networkNetworkCanvas %>%
lapply(degree,cmode="indegree") %>%
unlist(recursive = FALSE) %>%
as.data.frame()
histData$degree <- as.numeric(histData$".")
ggplot(histData, aes(x=degree)) +
geom_histogram(color="black", fill="white",bins=5) +
theme_classic()
ego_density(egorNetworkCanvas) %>%
full_join(egorNetworkCanvas$ego,by=".egoID") %>%
ggplot(aes(x = MarijuanaUsed, y = density)) +
geom_point(size=5) +
geom_text(label=egorNetworkCanvas$ego$networkCanvasCaseID, aes(vjust=c(-1.5),
hjust=c(-.5))) +
ylim(0,1.05) + theme_classic()
knit("nc_r.Rmd", output = "nc_r.md")
knit("nc_r.Rmd", output = "nc_r.md")
knitr::opts_chunk$set(dpi=300,fig.width=10)
# Store path to folder with Network Canvas data
### Note that this path will almost certainly be different on your own computer
path_to_data <- paste0(getwd(),'/networkCanvasExport/')
# Store path to Network Canvas protocol file
### Note that this path will almost certainly be different on your own computer
path_to_protocol <- paste0(getwd(),'/IJE_RADAR_Protocol.netcanvas')
# Load `ideanet`
library(ideanet)
# Set up `nc_read`
nc_data <- nc_read(path = path_to_data,
protocol = path_to_protocol)
head(nc_data$egos)
head(nc_data$alters)
# Observe names of data frames stored in `alter_edgelists`
names(nc_data$alter_edgelists)
# Alter edgelist for "Close" ties
head(nc_data$alter_edgelists$Close)
# Alter edgelist for "Drug" ties
head(nc_data$alter_edgelists$DrugTie)
# Alter edgelist for "Sex" ties
head(nc_data$alter_edgelists$Sex)
# Load required packages
library(egor)
library(sna)
library(ggplot2)
# Create alter list for only "Close" ties
close_alters <- nc_data$alters %>% filter(Close == TRUE)
# Create alter list for only "Drugs" ties
drug_alters <- nc_data$alters %>% filter(Drugs == TRUE)
# Create alter list for only "Sex" ties
sex_alters <- nc_data$alters %>% filter(Sex == TRUE)
# Create alter-alter edgelist for "Close" ties
close_aa <- nc_data$alter_edgelists$Close
# Create alter-alter edgelist for "Drugs" ties
drug_aa <- nc_data$alter_edgelists$DrugTie
# Create alter-alter edgelist for "Sex" ties
sex_aa <- nc_data$alter_edgelists$SexTie
# Note that the `egor` function will also work if we specify the ID values
# in our data generated by Network Canvas
egorNetworkCanvas <- egor(
# Note we are using the alter list specifically for "Close" ties
alters = nc_data$alters,
# Our ego list is unchanged, so we draw on it as it is stored in
# `nc_data`
egos = nc_data$egos,
# We use `close_aa` as our alter-alter edgelist, which is the same
# as `nc_data$alter_edgelists`
aaties = close_aa,
#
ID.vars = list(
ego = "networkCanvasEgoUUID",
alter = "networkCanvasUUID",
source = "networkCanvasSourceUUID",
target = "networkCanvasTargetUUID"))
oneEgoNet <- as_network(egorNetworkCanvas)[[1]]
oneEgoNet%v%"vertex.names" <- oneEgoNet%v%"name"
colorScheme <- c( "#CC6677", "#117733", "#AA4499",
"#6699CC")
# A little recoding to get a color for each frequency
nodeColors <- ifelse(oneEgoNet%v%"ContactFreq"=="Daily",colorScheme[1],
ifelse(oneEgoNet%v%"ContactFreq"=="Weekly",colorScheme[2],
ifelse(oneEgoNet%v%"ContactFreq"=="Less than \n weekly",colorScheme[3],
colorScheme[4])))
gplot(oneEgoNet,
usearrows = FALSE,
label = oneEgoNet%v%"name",
displaylabels = TRUE,
vertex.col=nodeColors,
edge.col="gray",
coord = matrix(c(as.numeric(oneEgoNet%v%"Cords_x"),
-as.numeric(oneEgoNet%v%"Cords_y")),
nrow=length(unique(oneEgoNet%v%"name")),
ncol=2))
# Make a visualization displaying both frequency of communication and drug use status
# A quick note: `egor`'s visualization tools don't appear to like working with `logical`-class
# vectors such as the `Drugs` variable in our alter list. To allow for smooth visualization,
# we recode `Drugs` as a new character variable with the labels we want to use in our visualization:
egorNetworkCanvas$alter$Drugs_label <- ifelse(is.na(egorNetworkCanvas$alter$Drugs), "Not Drug Partner", "Drug Partner")
# We'll also recode our `ContactFreq` variable to show better labels
egorNetworkCanvas$alter$ContactFreq_label <- ifelse(egorNetworkCanvas$alter$ContactFreq == "Less_than_weekly",
"Less than\nweekly",
egorNetworkCanvas$alter$ContactFreq)
# And we'll want to create a label column for node IDs as well
egorNetworkCanvas$alter$alter_label <- as.character(egorNetworkCanvas$alter$.altID)
plot(egorNetworkCanvas,
venn_var = "Drugs_label",
pie_var = "ContactFreq_label",
vertex_label_var = "name",
type = "egogram")
summary(egorNetworkCanvas)
ego_density(egorNetworkCanvas)
networkNetworkCanvas <- as_network(egorNetworkCanvas)
histData <- networkNetworkCanvas %>%
lapply(degree,cmode="indegree") %>%
unlist(recursive = FALSE) %>%
as.data.frame()
histData$degree <- as.numeric(histData$".")
ggplot(histData, aes(x=degree)) +
geom_histogram(color="black", fill="white",bins=5) +
theme_classic()
ego_density(egorNetworkCanvas) %>%
full_join(egorNetworkCanvas$ego,by=".egoID") %>%
ggplot(aes(x = MarijuanaUsed, y = density)) +
geom_point(size=5) +
geom_text(label=egorNetworkCanvas$ego$networkCanvasCaseID, aes(vjust=c(-1.5),
hjust=c(-.5))) +
ylim(0,1.05) + theme_classic()
knit("nc_r.Rmd", output = "nc_r.md")
knit("nc_r.Rmd", output = "nc_r.md")
